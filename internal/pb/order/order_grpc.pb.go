// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersClient interface {
	Add(ctx context.Context, in *OrderFromCourierInputData, opts ...grpc.CallOption) (*OrderFromCourierInputData, error)
	Delete(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	IssueOrders(ctx context.Context, in *OrdersToIssue, opts ...grpc.CallOption) (*ResultResponse, error)
	ReturnOrders(ctx context.Context, in *ReturnOrderInputData, opts ...grpc.CallOption) (*ResultResponse, error)
	GetOrderReturns(ctx context.Context, in *GetOrdersReturnsRequest, opts ...grpc.CallOption) (Orders_GetOrderReturnsClient, error)
	GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (Orders_GetUserOrdersClient, error)
}

type ordersClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersClient(cc grpc.ClientConnInterface) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) Add(ctx context.Context, in *OrderFromCourierInputData, opts ...grpc.CallOption) (*OrderFromCourierInputData, error) {
	out := new(OrderFromCourierInputData)
	err := c.cc.Invoke(ctx, "/pb.Orders/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) Delete(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/pb.Orders/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) IssueOrders(ctx context.Context, in *OrdersToIssue, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/pb.Orders/IssueOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) ReturnOrders(ctx context.Context, in *ReturnOrderInputData, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/pb.Orders/ReturnOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) GetOrderReturns(ctx context.Context, in *GetOrdersReturnsRequest, opts ...grpc.CallOption) (Orders_GetOrderReturnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orders_ServiceDesc.Streams[0], "/pb.Orders/GetOrderReturns", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersGetOrderReturnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_GetOrderReturnsClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type ordersGetOrderReturnsClient struct {
	grpc.ClientStream
}

func (x *ordersGetOrderReturnsClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersClient) GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (Orders_GetUserOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orders_ServiceDesc.Streams[1], "/pb.Orders/GetUserOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersGetUserOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_GetUserOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type ordersGetUserOrdersClient struct {
	grpc.ClientStream
}

func (x *ordersGetUserOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdersServer is the server API for Orders service.
// All implementations must embed UnimplementedOrdersServer
// for forward compatibility
type OrdersServer interface {
	Add(context.Context, *OrderFromCourierInputData) (*OrderFromCourierInputData, error)
	Delete(context.Context, *DeleteOrderRequest) (*ResultResponse, error)
	IssueOrders(context.Context, *OrdersToIssue) (*ResultResponse, error)
	ReturnOrders(context.Context, *ReturnOrderInputData) (*ResultResponse, error)
	GetOrderReturns(*GetOrdersReturnsRequest, Orders_GetOrderReturnsServer) error
	GetUserOrders(*GetUserOrdersRequest, Orders_GetUserOrdersServer) error
	mustEmbedUnimplementedOrdersServer()
}

// UnimplementedOrdersServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServer struct {
}

func (UnimplementedOrdersServer) Add(context.Context, *OrderFromCourierInputData) (*OrderFromCourierInputData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedOrdersServer) Delete(context.Context, *DeleteOrderRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrdersServer) IssueOrders(context.Context, *OrdersToIssue) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueOrders not implemented")
}
func (UnimplementedOrdersServer) ReturnOrders(context.Context, *ReturnOrderInputData) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrders not implemented")
}
func (UnimplementedOrdersServer) GetOrderReturns(*GetOrdersReturnsRequest, Orders_GetOrderReturnsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderReturns not implemented")
}
func (UnimplementedOrdersServer) GetUserOrders(*GetUserOrdersRequest, Orders_GetUserOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedOrdersServer) mustEmbedUnimplementedOrdersServer() {}

// UnsafeOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServer will
// result in compilation errors.
type UnsafeOrdersServer interface {
	mustEmbedUnimplementedOrdersServer()
}

func RegisterOrdersServer(s grpc.ServiceRegistrar, srv OrdersServer) {
	s.RegisterService(&Orders_ServiceDesc, srv)
}

func _Orders_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFromCourierInputData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Orders/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Add(ctx, req.(*OrderFromCourierInputData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Orders/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Delete(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_IssueOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersToIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).IssueOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Orders/IssueOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).IssueOrders(ctx, req.(*OrdersToIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_ReturnOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderInputData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).ReturnOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Orders/ReturnOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).ReturnOrders(ctx, req.(*ReturnOrderInputData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_GetOrderReturns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrdersReturnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).GetOrderReturns(m, &ordersGetOrderReturnsServer{stream})
}

type Orders_GetOrderReturnsServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type ordersGetOrderReturnsServer struct {
	grpc.ServerStream
}

func (x *ordersGetOrderReturnsServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _Orders_GetUserOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).GetUserOrders(m, &ordersGetUserOrdersServer{stream})
}

type Orders_GetUserOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type ordersGetUserOrdersServer struct {
	grpc.ServerStream
}

func (x *ordersGetUserOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

// Orders_ServiceDesc is the grpc.ServiceDesc for Orders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Orders_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Orders_Delete_Handler,
		},
		{
			MethodName: "IssueOrders",
			Handler:    _Orders_IssueOrders_Handler,
		},
		{
			MethodName: "ReturnOrders",
			Handler:    _Orders_ReturnOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderReturns",
			Handler:       _Orders_GetOrderReturns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserOrders",
			Handler:       _Orders_GetUserOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
