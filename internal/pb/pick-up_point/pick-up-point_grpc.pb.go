// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PickUpPointsClient is the client API for PickUpPoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PickUpPointsClient interface {
	Add(ctx context.Context, in *PickUpPointAdd, opts ...grpc.CallOption) (*PickUpPoint, error)
	Delete(ctx context.Context, in *DeletePPRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*PickUpPoint, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (PickUpPoints_GetAllClient, error)
	Update(ctx context.Context, in *PickUpPointUpdate, opts ...grpc.CallOption) (*PickUpPointUpdate, error)
}

type pickUpPointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPickUpPointsClient(cc grpc.ClientConnInterface) PickUpPointsClient {
	return &pickUpPointsClient{cc}
}

func (c *pickUpPointsClient) Add(ctx context.Context, in *PickUpPointAdd, opts ...grpc.CallOption) (*PickUpPoint, error) {
	out := new(PickUpPoint)
	err := c.cc.Invoke(ctx, "/pb.PickUpPoints/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointsClient) Delete(ctx context.Context, in *DeletePPRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.PickUpPoints/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointsClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*PickUpPoint, error) {
	out := new(PickUpPoint)
	err := c.cc.Invoke(ctx, "/pb.PickUpPoints/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointsClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (PickUpPoints_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &PickUpPoints_ServiceDesc.Streams[0], "/pb.PickUpPoints/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &pickUpPointsGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PickUpPoints_GetAllClient interface {
	Recv() (*PickUpPoint, error)
	grpc.ClientStream
}

type pickUpPointsGetAllClient struct {
	grpc.ClientStream
}

func (x *pickUpPointsGetAllClient) Recv() (*PickUpPoint, error) {
	m := new(PickUpPoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pickUpPointsClient) Update(ctx context.Context, in *PickUpPointUpdate, opts ...grpc.CallOption) (*PickUpPointUpdate, error) {
	out := new(PickUpPointUpdate)
	err := c.cc.Invoke(ctx, "/pb.PickUpPoints/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PickUpPointsServer is the server API for PickUpPoints service.
// All implementations must embed UnimplementedPickUpPointsServer
// for forward compatibility
type PickUpPointsServer interface {
	Add(context.Context, *PickUpPointAdd) (*PickUpPoint, error)
	Delete(context.Context, *DeletePPRequest) (*DeleteResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*PickUpPoint, error)
	GetAll(*GetAllRequest, PickUpPoints_GetAllServer) error
	Update(context.Context, *PickUpPointUpdate) (*PickUpPointUpdate, error)
	mustEmbedUnimplementedPickUpPointsServer()
}

// UnimplementedPickUpPointsServer must be embedded to have forward compatible implementations.
type UnimplementedPickUpPointsServer struct {
}

func (UnimplementedPickUpPointsServer) Add(context.Context, *PickUpPointAdd) (*PickUpPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPickUpPointsServer) Delete(context.Context, *DeletePPRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPickUpPointsServer) GetByID(context.Context, *GetByIDRequest) (*PickUpPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPickUpPointsServer) GetAll(*GetAllRequest, PickUpPoints_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPickUpPointsServer) Update(context.Context, *PickUpPointUpdate) (*PickUpPointUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPickUpPointsServer) mustEmbedUnimplementedPickUpPointsServer() {}

// UnsafePickUpPointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PickUpPointsServer will
// result in compilation errors.
type UnsafePickUpPointsServer interface {
	mustEmbedUnimplementedPickUpPointsServer()
}

func RegisterPickUpPointsServer(s grpc.ServiceRegistrar, srv PickUpPointsServer) {
	s.RegisterService(&PickUpPoints_ServiceDesc, srv)
}

func _PickUpPoints_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PickUpPoints/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointsServer).Add(ctx, req.(*PickUpPointAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPoints_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PickUpPoints/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointsServer).Delete(ctx, req.(*DeletePPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPoints_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointsServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PickUpPoints/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointsServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPoints_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PickUpPointsServer).GetAll(m, &pickUpPointsGetAllServer{stream})
}

type PickUpPoints_GetAllServer interface {
	Send(*PickUpPoint) error
	grpc.ServerStream
}

type pickUpPointsGetAllServer struct {
	grpc.ServerStream
}

func (x *pickUpPointsGetAllServer) Send(m *PickUpPoint) error {
	return x.ServerStream.SendMsg(m)
}

func _PickUpPoints_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PickUpPoints/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointsServer).Update(ctx, req.(*PickUpPointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// PickUpPoints_ServiceDesc is the grpc.ServiceDesc for PickUpPoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PickUpPoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PickUpPoints",
	HandlerType: (*PickUpPointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PickUpPoints_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PickUpPoints_Delete_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PickUpPoints_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PickUpPoints_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _PickUpPoints_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pick-up-point.proto",
}
