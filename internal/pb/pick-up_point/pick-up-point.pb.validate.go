// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pick-up-point.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllRequestMultiError, or
// nil if none found.
func (m *GetAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllRequestMultiError(errors)
	}

	return nil
}

// GetAllRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRequestMultiError) AllErrors() []error { return m }

// GetAllRequestValidationError is the validation error returned by
// GetAllRequest.Validate if the designated constraints aren't met.
type GetAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRequestValidationError) ErrorName() string { return "GetAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRequestValidationError{}

// Validate checks the field values on DeletePPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePPRequestMultiError, or nil if none found.
func (m *DeletePPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePPRequestMultiError(errors)
	}

	return nil
}

// DeletePPRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePPRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePPRequestMultiError) AllErrors() []error { return m }

// DeletePPRequestValidationError is the validation error returned by
// DeletePPRequest.Validate if the designated constraints aren't met.
type DeletePPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePPRequestValidationError) ErrorName() string { return "DeletePPRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeletePPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePPRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on GetByIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIDRequestMultiError,
// or nil if none found.
func (m *GetByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIDRequestMultiError(errors)
	}

	return nil
}

// GetByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDRequestMultiError) AllErrors() []error { return m }

// GetByIDRequestValidationError is the validation error returned by
// GetByIDRequest.Validate if the designated constraints aren't met.
type GetByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDRequestValidationError) ErrorName() string { return "GetByIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDRequestValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for City

	// no validation rules for Street

	// no validation rules for HouseNum

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on PickUpPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PickUpPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PickUpPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PickUpPointMultiError, or
// nil if none found.
func (m *PickUpPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *PickUpPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PickUpPointValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PickUpPointValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PickUpPointValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return PickUpPointMultiError(errors)
	}

	return nil
}

// PickUpPointMultiError is an error wrapping multiple validation errors
// returned by PickUpPoint.ValidateAll() if the designated constraints aren't met.
type PickUpPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PickUpPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PickUpPointMultiError) AllErrors() []error { return m }

// PickUpPointValidationError is the validation error returned by
// PickUpPoint.Validate if the designated constraints aren't met.
type PickUpPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PickUpPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PickUpPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PickUpPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PickUpPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PickUpPointValidationError) ErrorName() string { return "PickUpPointValidationError" }

// Error satisfies the builtin error interface
func (e PickUpPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPickUpPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PickUpPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PickUpPointValidationError{}

// Validate checks the field values on PickUpPointUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PickUpPointUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PickUpPointUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PickUpPointUpdateMultiError, or nil if none found.
func (m *PickUpPointUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *PickUpPointUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := PickUpPointUpdateValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 50 {
		err := PickUpPointUpdateValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAddress() == nil {
		err := PickUpPointUpdateValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PickUpPointUpdateValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PickUpPointUpdateValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PickUpPointUpdateValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_PickUpPointUpdate_PhoneNumber_Pattern.MatchString(m.GetPhoneNumber()) {
		err := PickUpPointUpdateValidationError{
			field:  "PhoneNumber",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PickUpPointUpdateMultiError(errors)
	}

	return nil
}

// PickUpPointUpdateMultiError is an error wrapping multiple validation errors
// returned by PickUpPointUpdate.ValidateAll() if the designated constraints
// aren't met.
type PickUpPointUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PickUpPointUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PickUpPointUpdateMultiError) AllErrors() []error { return m }

// PickUpPointUpdateValidationError is the validation error returned by
// PickUpPointUpdate.Validate if the designated constraints aren't met.
type PickUpPointUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PickUpPointUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PickUpPointUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PickUpPointUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PickUpPointUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PickUpPointUpdateValidationError) ErrorName() string {
	return "PickUpPointUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e PickUpPointUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPickUpPointUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PickUpPointUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PickUpPointUpdateValidationError{}

var _PickUpPointUpdate_PhoneNumber_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on PickUpPointAdd with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PickUpPointAdd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PickUpPointAdd with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PickUpPointAddMultiError,
// or nil if none found.
func (m *PickUpPointAdd) ValidateAll() error {
	return m.validate(true)
}

func (m *PickUpPointAdd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 50 {
		err := PickUpPointAddValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAddress() == nil {
		err := PickUpPointAddValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PickUpPointAddValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PickUpPointAddValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PickUpPointAddValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_PickUpPointAdd_PhoneNumber_Pattern.MatchString(m.GetPhoneNumber()) {
		err := PickUpPointAddValidationError{
			field:  "PhoneNumber",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PickUpPointAddMultiError(errors)
	}

	return nil
}

// PickUpPointAddMultiError is an error wrapping multiple validation errors
// returned by PickUpPointAdd.ValidateAll() if the designated constraints
// aren't met.
type PickUpPointAddMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PickUpPointAddMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PickUpPointAddMultiError) AllErrors() []error { return m }

// PickUpPointAddValidationError is the validation error returned by
// PickUpPointAdd.Validate if the designated constraints aren't met.
type PickUpPointAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PickUpPointAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PickUpPointAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PickUpPointAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PickUpPointAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PickUpPointAddValidationError) ErrorName() string { return "PickUpPointAddValidationError" }

// Error satisfies the builtin error interface
func (e PickUpPointAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPickUpPointAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PickUpPointAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PickUpPointAddValidationError{}

var _PickUpPointAdd_PhoneNumber_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on AddressDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressDTOMultiError, or
// nil if none found.
func (m *AddressDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRegion()); l < 3 || l > 50 {
		err := AddressDTOValidationError{
			field:  "Region",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCity()); l < 3 || l > 50 {
		err := AddressDTOValidationError{
			field:  "City",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetStreet()); l < 2 || l > 50 {
		err := AddressDTOValidationError{
			field:  "Street",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHouseNum()); l < 1 || l > 10 {
		err := AddressDTOValidationError{
			field:  "HouseNum",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddressDTOMultiError(errors)
	}

	return nil
}

// AddressDTOMultiError is an error wrapping multiple validation errors
// returned by AddressDTO.ValidateAll() if the designated constraints aren't met.
type AddressDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressDTOMultiError) AllErrors() []error { return m }

// AddressDTOValidationError is the validation error returned by
// AddressDTO.Validate if the designated constraints aren't met.
type AddressDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDTOValidationError) ErrorName() string { return "AddressDTOValidationError" }

// Error satisfies the builtin error interface
func (e AddressDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDTOValidationError{}
