// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "homework/internal/pick-up_point/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPickUpPointService is a mock of PickUpPointService interface.
type MockPickUpPointService struct {
	ctrl     *gomock.Controller
	recorder *MockPickUpPointServiceMockRecorder
}

// MockPickUpPointServiceMockRecorder is the mock recorder for MockPickUpPointService.
type MockPickUpPointServiceMockRecorder struct {
	mock *MockPickUpPointService
}

// NewMockPickUpPointService creates a new mock instance.
func NewMockPickUpPointService(ctrl *gomock.Controller) *MockPickUpPointService {
	mock := &MockPickUpPointService{ctrl: ctrl}
	mock.recorder = &MockPickUpPointServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickUpPointService) EXPECT() *MockPickUpPointServiceMockRecorder {
	return m.recorder
}

// AddPickUpPoint mocks base method.
func (m *MockPickUpPointService) AddPickUpPoint(ctx context.Context, point model.PickUpPoint) (*model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPickUpPoint", ctx, point)
	ret0, _ := ret[0].(*model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPickUpPoint indicates an expected call of AddPickUpPoint.
func (mr *MockPickUpPointServiceMockRecorder) AddPickUpPoint(ctx, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPickUpPoint", reflect.TypeOf((*MockPickUpPointService)(nil).AddPickUpPoint), ctx, point)
}

// DeletePickUpPoint mocks base method.
func (m *MockPickUpPointService) DeletePickUpPoint(ctx context.Context, ID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePickUpPoint", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePickUpPoint indicates an expected call of DeletePickUpPoint.
func (mr *MockPickUpPointServiceMockRecorder) DeletePickUpPoint(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePickUpPoint", reflect.TypeOf((*MockPickUpPointService)(nil).DeletePickUpPoint), ctx, ID)
}

// GetPickUpPointByID mocks base method.
func (m *MockPickUpPointService) GetPickUpPointByID(ctx context.Context, ID uint64) (*model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickUpPointByID", ctx, ID)
	ret0, _ := ret[0].(*model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickUpPointByID indicates an expected call of GetPickUpPointByID.
func (mr *MockPickUpPointServiceMockRecorder) GetPickUpPointByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickUpPointByID", reflect.TypeOf((*MockPickUpPointService)(nil).GetPickUpPointByID), ctx, ID)
}

// GetPickUpPoints mocks base method.
func (m *MockPickUpPointService) GetPickUpPoints(ctx context.Context) ([]model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickUpPoints", ctx)
	ret0, _ := ret[0].([]model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickUpPoints indicates an expected call of GetPickUpPoints.
func (mr *MockPickUpPointServiceMockRecorder) GetPickUpPoints(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickUpPoints", reflect.TypeOf((*MockPickUpPointService)(nil).GetPickUpPoints), ctx)
}

// UpdatePickUpPoint mocks base method.
func (m *MockPickUpPointService) UpdatePickUpPoint(ctx context.Context, point model.PickUpPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePickUpPoint", ctx, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePickUpPoint indicates an expected call of UpdatePickUpPoint.
func (mr *MockPickUpPointServiceMockRecorder) UpdatePickUpPoint(ctx, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePickUpPoint", reflect.TypeOf((*MockPickUpPointService)(nil).UpdatePickUpPoint), ctx, point)
}
