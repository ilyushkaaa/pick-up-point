// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	model "homework/internal/pick-up_point/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPPStorage is a mock of PPStorage interface.
type MockPPStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPPStorageMockRecorder
}

// MockPPStorageMockRecorder is the mock recorder for MockPPStorage.
type MockPPStorageMockRecorder struct {
	mock *MockPPStorage
}

// NewMockPPStorage creates a new mock instance.
func NewMockPPStorage(ctrl *gomock.Controller) *MockPPStorage {
	mock := &MockPPStorage{ctrl: ctrl}
	mock.recorder = &MockPPStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPPStorage) EXPECT() *MockPPStorageMockRecorder {
	return m.recorder
}

// AddPickUpPoint mocks base method.
func (m *MockPPStorage) AddPickUpPoint(ctx context.Context, point model.PickUpPoint) (*model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPickUpPoint", ctx, point)
	ret0, _ := ret[0].(*model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPickUpPoint indicates an expected call of AddPickUpPoint.
func (mr *MockPPStorageMockRecorder) AddPickUpPoint(ctx, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPickUpPoint", reflect.TypeOf((*MockPPStorage)(nil).AddPickUpPoint), ctx, point)
}

// DeletePickUpPoint mocks base method.
func (m *MockPPStorage) DeletePickUpPoint(ctx context.Context, ID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePickUpPoint", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePickUpPoint indicates an expected call of DeletePickUpPoint.
func (mr *MockPPStorageMockRecorder) DeletePickUpPoint(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePickUpPoint", reflect.TypeOf((*MockPPStorage)(nil).DeletePickUpPoint), ctx, ID)
}

// GetPickUpPointByID mocks base method.
func (m *MockPPStorage) GetPickUpPointByID(ctx context.Context, ID uint64) (*model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickUpPointByID", ctx, ID)
	ret0, _ := ret[0].(*model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickUpPointByID indicates an expected call of GetPickUpPointByID.
func (mr *MockPPStorageMockRecorder) GetPickUpPointByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickUpPointByID", reflect.TypeOf((*MockPPStorage)(nil).GetPickUpPointByID), ctx, ID)
}

// GetPickUpPointByName mocks base method.
func (m *MockPPStorage) GetPickUpPointByName(ctx context.Context, name string) (*model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickUpPointByName", ctx, name)
	ret0, _ := ret[0].(*model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickUpPointByName indicates an expected call of GetPickUpPointByName.
func (mr *MockPPStorageMockRecorder) GetPickUpPointByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickUpPointByName", reflect.TypeOf((*MockPPStorage)(nil).GetPickUpPointByName), ctx, name)
}

// GetPickUpPoints mocks base method.
func (m *MockPPStorage) GetPickUpPoints(ctx context.Context) ([]model.PickUpPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickUpPoints", ctx)
	ret0, _ := ret[0].([]model.PickUpPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickUpPoints indicates an expected call of GetPickUpPoints.
func (mr *MockPPStorageMockRecorder) GetPickUpPoints(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickUpPoints", reflect.TypeOf((*MockPPStorage)(nil).GetPickUpPoints), ctx)
}

// UpdatePickUpPoint mocks base method.
func (m *MockPPStorage) UpdatePickUpPoint(ctx context.Context, point model.PickUpPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePickUpPoint", ctx, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePickUpPoint indicates an expected call of UpdatePickUpPoint.
func (mr *MockPPStorageMockRecorder) UpdatePickUpPoint(ctx, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePickUpPoint", reflect.TypeOf((*MockPPStorage)(nil).UpdatePickUpPoint), ctx, point)
}
